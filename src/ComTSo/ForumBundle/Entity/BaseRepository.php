<?php

namespace ComTSo\ForumBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CommentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseRepository extends EntityRepository {

	public function findLastsCreated($limit = 20, \DateTime $since = null) {
		if (!$this->getClassMetadata()->hasField('createdAt')) {
			throw new \Exception('Cannot call this method on a Entity that has no createdAt field');
		}
		$qb = $this->createQueryBuilder('e')
				->addOrderBy('e.createdAt', 'DESC')
				->setMaxResults($limit);
		if ($since) {
			$qb->where('e.createdAt > :since')
					->setParameter('since', $since);
		}
		return $qb->getQuery()
						->getResult();
	}

	public function findLastsModified($limit = 20, \DateTime $since = null) {
		if (!$this->getClassMetadata()->hasField('updatedAt')) {
			throw new \Exception('Cannot call this method on a Entity that has no createdAt field');
		}
		$qb = $this->createQueryBuilder('e')
				->addOrderBy('e.updatedAt', 'DESC')
				->setMaxResults($limit);
		if ($since) {
			$qb->where('e.createdAt > :since')
					->setParameter('since', $since);
		}
		return $qb->getQuery()
						->getResult();
	}

	public function search($terms, $limit = 50) {
		if (!$this->getClassMetadata()->hasField('title') && !$this->getClassMetadata()->hasField('content')) {
			throw new \Exception('Cannot call this method on a Entity that has no title or content field');
		}
		$qb = $this->createQueryBuilder('e');
		$i = 0;
		foreach ($terms as $search) {
			$query = [];
			if ($this->getClassMetadata()->hasField('title')) {
				$query[] = "e.title LIKE :qt{$i}";
				$qb->setParameter("qt{$i}", "%{$search}%");
			}
			if ($this->getClassMetadata()->hasField('content')) {
				$query[] = "e.content LIKE :qc{$i}";
				$qb->setParameter("qc{$i}", "%{$search}%");
			}
			$qb->andWhere('(' . implode(' OR ', $query) . ')');
			$i++;
		}
		$qb->addOrderBy('e.createdAt', 'DESC')
				->setMaxResults($limit);
		return $qb->getQuery()
						->getResult();
	}

}
